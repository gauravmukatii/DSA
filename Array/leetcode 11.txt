11. Container With Most Water

//optimised using two pointers
class Solution {
    public int maxArea(int[] height) {

        int left = 0;
        int right = height.length-1;
        int max = 0;

        while(left < right){
            int tempMax = (right-left) * Math.min(height[left], height[right]);
            max = Math.max(tempMax, max);

            if(height[left] < height[right] ){
                left++;
            }else {
                right--;
            }

        }
        return max;

    }
}



//brute force(tle)

class Solution {
    public int maxArea(int[] height) {
        int n = height.length;
        int max = 0; 
          for(int i = 0; i < n; i++){
              for(int j = i+1; j < n; j++){
                int tempMax = (j-i) * Math.min(height[i], height[j]);
                max = Math.max(tempMax, max);
              }
          }
          return max;

    }
}