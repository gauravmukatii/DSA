1143. Longest Common Subsequence


class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int m = text1.length();
        int n = text2.length();

        int dp[][] = new int[m+1][n+1];

        // for(int i = 1; i < m+1; i++){
        //     for(int j = 1; j < n+1; j++){
        //         dp[i][j] = -1;
        //     }
        // }
        return lcs(text1, text2, m, n, dp);
    }


    //1st approach
    public int lcs(String t1, String t2, int m, int n, int[][] dp){
 
       for(int i = 1; i < m+1; i++){
            for(int j = 1; j < n+1; j++){
                if(t1.charAt(i-1) == t2.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1] + 1;
                }else{
                    dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]);
                }
            }
        }

       return dp[m][n];
    }

    //2nd approach
    // public int lcs(String t1, String t2, int m, int n, int[][] dp){
    //     if(m == 0 || n == 0){
    //         return 0;
    //     }

    //     if(dp[m][n] != -1){
    //         return dp[m][n];
    //     }

    //     if (t1.charAt(m - 1) == t2.charAt(n - 1)) {
    //         return dp[m][n] = 1 + lcs(t1, t2, m - 1, n - 1, dp);
    //     } else {
    //         return dp[m][n] = Math.max(lcs(t1, t2, m, n - 1, dp), lcs(t1, t2, m - 1, n, dp));
    //     }
    // }
}