103. Binary Tree Zigzag Level Order Traversal

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> finalAns = new ArrayList<>();

        if(root == null){
             return finalAns;
        }

        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        boolean flag = true;

        while(!q.isEmpty()){
            int sizeOfLevel = q.size();
            List<Integer> level = new ArrayList<>(sizeOfLevel);
            
 
            for(int i = 0; i < sizeOfLevel; i++){

                TreeNode currentRoot = q.element();
                q.poll();
                level.add(currentRoot.val);

                if(currentRoot.left != null){
                    q.offer(currentRoot.left);
                }

                if(currentRoot.right != null){
                    q.offer(currentRoot.right);
                }
                

            }

            if(flag == false){
                Collections.reverse(level);
                finalAns.add(level);
                flag = !flag;
            }else{
                finalAns.add(level);
                flag = !flag;
            }

        }
    return finalAns;

    }
}