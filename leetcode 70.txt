70. Climbing Stairs

//recursion

public int climbStairs(int n){
        if(n==0 || n==1){
                return 1;
            }

           return climbStairs(n-1) + climbStairs(n-2);
        }

//bottom-up

 public int climbStairs(int n){
        if(n == 0 || n == 1)
            return 1;

        int[] dp = new int[n+1];
        dp[0] = 1;
        dp[1] = 1;


        for(int i = 2; i <= n; i++){
           dp[i] = dp[i-1] + dp[i-2];
        }
        
        return dp[n];
    }




//dp(memo top-bottom)

class Solution {
    public int climbStairs(int n) {
        int[] memo = new int[n+1];
        return climbStairsMemo(n, memo);
    }


    public int climbStairsMemo(int n, int[] memo){
            if(n==0 || n==1){
                return 1;
            }

            if(memo[n] == 0){
                memo[n] = climbStairsMemo(n-1, memo) + climbStairsMemo(n-2, memo);
            }
            return memo[n];
    }
}