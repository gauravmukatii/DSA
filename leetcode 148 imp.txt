148. Sort Linked List(Using Merge sort)

class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }

        ListNode mid = middleNode(head);
        ListNode left = sortList(head);
        ListNode right = sortList(mid);
   
        return mergeTwoLists(left, right);

    }

    public ListNode mergeTwoLists(ListNode List1, ListNode List2) {
        if(List1 == null) return List2;
        if(List2 == null) return List1;

        ListNode newList = new ListNode(0);
        ListNode head = newList;

        while(List1 != null && List2 != null){
            if(List1.val <= List2.val){
                  head.next = new ListNode(List1.val);
                  List1 = List1.next;
            }else{
                  head.next = new ListNode(List2.val);
                  List2 = List2.next;
            }
            head = head.next;
        }

        if(List1 != null){
            head.next = List1;
        }

        if(List2 != null){
            head.next = List2;
        }

        return newList.next;

    }

    public ListNode middleNode(ListNode head) {
          ListNode midPrev = null;
          while(head != null && head.next != null){
              midPrev = (midPrev == null) ? head : midPrev.next;
              head = head.next.next;
          }
          ListNode mid = midPrev.next;
          midPrev.next = null;
          return mid;
    }

}